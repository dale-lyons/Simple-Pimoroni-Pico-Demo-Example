; Program name
.program rgb

pull block 					; Pull from FIFO to OSR (only once)
mov y, osr 					; Copy value from OSR to y scratch register

.wrap_target

mov osr, null
out pins, 16
//set pins, 0 				; Zero RGB pins in blanking

wait 1 irq 1 [3]			; Wait for vsync active mode (starts 5 cycles after execution)
mov x,y

colorout:
    pull block
	out pins, 16 [3]
	jmp x-- colorout		; Stay here thru horizontal active mode
.wrap


% c-sdk {
static inline void rgb_program_init(PIO pio, uint sm, uint offset, uint pin) {

    // creates state machine configuration object c, sets
    // to default configurations. I believe this function is auto-generated
    // and gets a name of <program name>_program_get_default_config
    // Yes, page 40 of SDK guide
    pio_sm_config c = rgb_program_get_default_config(offset);


    // Set this pin's GPIO function (connect PIO to the pad)
    //RED
    pio_gpio_init(pio, 0);
    pio_gpio_init(pio, 1);
    pio_gpio_init(pio, 2);
    pio_gpio_init(pio, 3);
    pio_gpio_init(pio, 4);


    //GREEN
    //pio_gpio_init(pio, 5);//NOT USED
    pio_gpio_init(pio, 6);
    pio_gpio_init(pio, 7);
    pio_gpio_init(pio, 8);
    pio_gpio_init(pio, 9);
    pio_gpio_init(pio, 10);

    //BLUE
    pio_gpio_init(pio, 11);
    pio_gpio_init(pio, 12);
    pio_gpio_init(pio, 13);
    pio_gpio_init(pio, 14);
    pio_gpio_init(pio, 15);
    pio_sm_set_consecutive_pindirs(pio, sm, 0, 16, true);

    //sm_config_set_set_pins(&c, 0, 8);
    sm_config_set_out_pins(&c, 0, 16);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
}
%}